package com.suparnatural.plugin.graphql.processors

import com.suparnatural.plugin.graphql.config.SuparnaturalGraphqlExtension
import com.suparnatural.plugin.graphql.test.container
import org.junit.jupiter.api.Test
import java.io.File

internal class TypeProcessorKtTest {
    @Test
    fun processType() {
        val c = container("{\n  \"operations\": [\n    {\n      \"filePath\": \"file:///Users/suparngupta/Code/gql-codegen/src/query.gql\",\n      \"operationName\": \"continentQuery\",\n      \"operationType\": \"query\",\n      \"rootType\": \"Query\",\n      \"variables\": [],\n      \"source\": \"query continentQuery {\\n  continents {\\n    __typename\\n    code\\n    name\\n    countries {\\n      __typename\\n      ...country\\n    }\\n  }\\n}\",\n      \"fields\": [\n        {\n          \"responseName\": \"continents\",\n          \"fieldName\": \"continents\",\n          \"type\": \"[Continent]\",\n          \"isConditional\": false,\n          \"isDeprecated\": false,\n          \"fields\": [\n            {\n              \"responseName\": \"__typename\",\n              \"fieldName\": \"__typename\",\n              \"type\": \"String!\",\n              \"isConditional\": false\n            },\n            {\n              \"responseName\": \"code\",\n              \"fieldName\": \"code\",\n              \"type\": \"String\",\n              \"isConditional\": false,\n              \"isDeprecated\": false\n            },\n            {\n              \"responseName\": \"name\",\n              \"fieldName\": \"name\",\n              \"type\": \"String\",\n              \"isConditional\": false,\n              \"isDeprecated\": false\n            },\n            {\n              \"responseName\": \"countries\",\n              \"fieldName\": \"countries\",\n              \"type\": \"[Country]\",\n              \"isConditional\": false,\n              \"isDeprecated\": false,\n              \"fields\": [\n                {\n                  \"responseName\": \"__typename\",\n                  \"fieldName\": \"__typename\",\n                  \"type\": \"String!\",\n                  \"isConditional\": false\n                }\n              ],\n              \"fragmentSpreads\": [\n                \"country\"\n              ],\n              \"inlineFragments\": []\n            }\n          ],\n          \"fragmentSpreads\": [],\n          \"inlineFragments\": []\n        }\n      ],\n      \"fragmentSpreads\": [],\n      \"inlineFragments\": [],\n      \"fragmentsReferenced\": [\n        \"country\",\n        \"continent\"\n      ],\n      \"sourceWithFragments\": \"query continentQuery {\\n  continents {\\n    __typename\\n    code\\n    name\\n    countries {\\n      __typename\\n      ...country\\n    }\\n  }\\n}\\nfragment country on Country {\\n  __typename\\n  name\\n  code\\n  continent {\\n    __typename\\n    ...continent\\n  }\\n}\\nfragment continent on Continent {\\n  __typename\\n  code\\n  name\\n}\",\n      \"operationId\": \"4731b3a9e39f60eb9f048d9e7e2c876ef52bbfcddecf9f1f818f0750ff56e108\"\n    }\n  ],\n  \"fragments\": [\n    {\n      \"typeCondition\": \"Country\",\n      \"possibleTypes\": [\n        \"Country\"\n      ],\n      \"fragmentName\": \"country\",\n      \"filePath\": \"file:///Users/suparngupta/Code/gql-codegen/src/query.gql\",\n      \"source\": \"fragment country on Country {\\n  __typename\\n  name\\n  code\\n  continent {\\n    __typename\\n    ...continent\\n  }\\n}\",\n      \"fields\": [\n        {\n          \"responseName\": \"__typename\",\n          \"fieldName\": \"__typename\",\n          \"type\": \"String!\",\n          \"isConditional\": false\n        },\n        {\n          \"responseName\": \"name\",\n          \"fieldName\": \"name\",\n          \"type\": \"String\",\n          \"isConditional\": false,\n          \"isDeprecated\": false\n        },\n        {\n          \"responseName\": \"code\",\n          \"fieldName\": \"code\",\n          \"type\": \"String\",\n          \"isConditional\": false,\n          \"isDeprecated\": false\n        },\n        {\n          \"responseName\": \"continent\",\n          \"fieldName\": \"continent\",\n          \"type\": \"Continent\",\n          \"isConditional\": false,\n          \"isDeprecated\": false,\n          \"fields\": [\n            {\n              \"responseName\": \"__typename\",\n              \"fieldName\": \"__typename\",\n              \"type\": \"String!\",\n              \"isConditional\": false\n            }\n          ],\n          \"fragmentSpreads\": [\n            \"continent\"\n          ],\n          \"inlineFragments\": []\n        }\n      ],\n      \"fragmentSpreads\": [],\n      \"inlineFragments\": []\n    },\n    {\n      \"typeCondition\": \"Continent\",\n      \"possibleTypes\": [\n        \"Continent\"\n      ],\n      \"fragmentName\": \"continent\",\n      \"filePath\": \"file:///Users/suparngupta/Code/gql-codegen/src/query.gql\",\n      \"source\": \"fragment continent on Continent {\\n  __typename\\n  code\\n  name\\n}\",\n      \"fields\": [\n        {\n          \"responseName\": \"__typename\",\n          \"fieldName\": \"__typename\",\n          \"type\": \"String!\",\n          \"isConditional\": false\n        },\n        {\n          \"responseName\": \"code\",\n          \"fieldName\": \"code\",\n          \"type\": \"String\",\n          \"isConditional\": false,\n          \"isDeprecated\": false\n        },\n        {\n          \"responseName\": \"name\",\n          \"fieldName\": \"name\",\n          \"type\": \"String\",\n          \"isConditional\": false,\n          \"isDeprecated\": false\n        }\n      ],\n      \"fragmentSpreads\": [],\n      \"inlineFragments\": []\n    }\n  ],\n  \"typesUsed\": []\n}")
        val types = processTypes(c.typesUsed, SuparnaturalGraphqlExtension)
        val fragments = processFragments(c.fragments, SuparnaturalGraphqlExtension)
        types.writeTo(File("output"))
        fragments.writeTo(File("output"))
//        assertNotNull(types)
//

//        val x = TypeSpec.classBuilder("Hello")
//                .addProperty("One", String::class)
//        val a = x.build()
//        x.addProperty("Two", String::class)
//        val b = x.build()
//        println(a)
//        println(b)
    }
}