/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds/
 */
buildscript {
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.4.1'
    }
    ext.suparnatural_version = '1.0.1'
}

plugins {
    id 'org.jetbrains.kotlin.multiplatform' version '1.3.40' apply false
    id 'org.jetbrains.kotlin.native.cocoapods' version '1.3.40' apply false
    id 'kotlinx-serialization' version '1.3.40' apply false
    id 'com.jfrog.bintray' version '1.8.4' apply false
    id 'org.jetbrains.dokka' version '0.9.18' apply false
}

subprojects {

    def projectName = name

    Properties localProperties = new Properties()
    localProperties.load(project.rootProject.file('local.properties').newDataInputStream())

    group 'com.suparnatural'
    version suparnatural_version

    repositories {
        mavenCentral()
        jcenter()
        google()
        maven { url "https://kotlin.bintray.com/kotlinx" }
        maven { url "https://dl.bintray.com/suparnatural/kotlin-multiplatform" }
    }

    apply plugin: 'maven-publish'
    apply plugin: 'idea'
    apply plugin: 'org.jetbrains.kotlin.multiplatform'
    apply plugin: 'com.jfrog.bintray'
    apply plugin: 'org.jetbrains.dokka'
    apply plugin: 'com.android.library'
    apply plugin: 'org.jetbrains.kotlin.native.cocoapods'


    // apply idea
    idea {
        module {
            downloadJavadoc = true
            downloadSources = true
        }
    }

    android {
        compileSdkVersion 28
        defaultConfig {
            minSdkVersion 21
            targetSdkVersion 28
            versionCode 1
            versionName '1.0'
            testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
        }
        buildTypes {
            release {
                minifyEnabled false
            }
        }
        sourceSets {
            main {
                manifest.srcFile 'src/androidMain/AndroidManifest.xml'
                java.srcDirs = ['src/androidMain/kotlin']
                res.srcDirs = ['src/androidMain/resources']
            }
            androidTest {
                java.srcDirs = ['src/androidTest/kotlin']
                res.srcDirs = ['src/androidTest/resources']
            }
        }
    }
    dependencies {
        androidTestImplementation 'com.android.support.test:runner:1.0.2'
    }


    dokka {
        outputFormat = "html"
        outputDirectory = "${project.projectDir.getPath()}/docs"
        impliedPlatforms = ["Common"] // This will force platform tags for all non-common sources e.g. "JVM"
        kotlinTasks {
            // dokka fails to retrieve sources from MPP-tasks so they must be set empty to avoid exception
            // use sourceRoot instead (see below)
            []
        }
        sourceRoot {
            // assuming there is only a single source dir...
            path = kotlin.sourceSets.commonMain.kotlin.srcDirs[0]
            platforms = ["Common"]
        }

    }


    // kotlin multiplatform config
    kotlin {
        cocoapods {
            // Configure fields required by CocoaPods.
            summary = projectName
            homepage = "https://github.com/suparngp/kotlin-multiplatform-projects/tree/master/${projectName}"
        }

        iosX64('iosX64')
        iosArm64('iosArm64')

        android('android') {
            publishLibraryVariants("release")
        }


        sourceSets {
            commonMain {
                dependencies {
                    implementation kotlin('stdlib-common')
                }
            }
            commonTest {
                dependencies {
                    implementation kotlin('test-common')
                    implementation kotlin('test-annotations-common')
                }
            }
            
            androidMain {
                dependencies {
                    implementation kotlin('stdlib')

                }
            }
            androidTest {
                dependencies {
                    implementation kotlin('test')
                    implementation kotlin('test-junit')
                }
            }

            iosMain {}
            iosTest {}

            iosArm64Main {
                dependsOn iosMain
            }
            iosArm64Test {
                dependsOn iosTest
            }
            iosX64Main {
                dependsOn iosMain
            }
            iosX64Test {
                dependsOn iosTest
            }

        }
    }

    bintrayUpload.dependsOn(publishToMavenLocal)
    bintrayUpload.doFirst {
        publications = project.publishing.publications.collect { it.name }
    }

    bintray {
        user = localProperties.get('BINTRAY_USERNAME')
        key = localProperties.get('BINTRAY_API_KEY')
        override = true
        publish = true
        pkg {
            repo = localProperties.get('BINTRAY_REPOSITORY')
            name = projectName
            licenses = ['MIT']
            vcsUrl = 'https://github.com/suparngp/kotlin-multiplatform-projects/tree/master/' + projectName
            version {
                name = suparnatural_version
                desc = suparnatural_version
                released = new Date()
            }
        }

    }

    task copyPlist(type: Copy) {
        def binary = kotlin.targets.iosX64.binaries.getTest('DEBUG')
        def infoPlistSrc = file("$rootProject.projectDir/src/iosTest/resources/Info.plist")
        def infoPlistDest = file(binary.outputDirectory)
        from infoPlistSrc
        into infoPlistDest
    }

    task iosTest {
        def device = project.findProperty("iosDevice")?.toString() ?: "iPhone 8"
        dependsOn kotlin.targets.iosX64.binaries.getTest('DEBUG').linkTaskName
        dependsOn copyPlist
        group = JavaBasePlugin.VERIFICATION_GROUP
        description = "Runs tests for target 'ios' on an iOS simulator"

        doLast {
            def binary = kotlin.targets.iosX64.binaries.getTest('DEBUG').outputFile
            exec {
                commandLine 'xcrun', 'simctl', 'spawn', device, binary.absolutePath
            }
        }
    }


    configurations {
        compileClasspath
    }
}

